<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2020-09-13 Sun 02:16 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Programming in the Linux Terminal (aka Bash)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Huehueocelotl" />
<link rel="stylesheet"
                  href="./css/style.css" type="text/css"/>
	 <script type="text/javascript" async
	 src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML" async>
	 </script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Programming in the Linux Terminal (aka Bash)</h1>
<div class="post-details"> 
<div class="post-author">Posted by: Huehueocelotl</div> 
<div class="post-date"><time>[2020-08-16 Sun]</time> </div> 
<a href=index.html> <b style="color:#FF9900">Home</b> </a> 
</div>
<div id="outline-container-org753706b" class="outline-2">
<h2 id="org753706b">Why to bother with the terminal?</h2>
<div class="outline-text-2" id="text-org753706b">
<p>
If you are an ordinary computer user and you find yourself asking this question, it is very likely that you are suspecting that you are not using your personal computer in its full capacity.
A  popular saying when discussing about technology reads: <i>nowadays personal computers and laptops as powerful and even more than the computers used to send the man to the moon</i>.
But it is not rare to find people with different jobs struggling to create a monthly report of their results. Even more, I strongly believe that there are so many bad
decisions taken every day on a basis of a poorly done copy and paste.
</p>

<p>
If you take a look at your computer and your favourite operating system, you can notice that it is the computer the one giving commands to users. The users are overwhelmed with messages like
<i>click here</i>, or <i>i will save this file somewhere you don't have to ask where</i> or the annoying <i>click on X to close but I won't close but minimise the window</i>. Yes, believe it or not, even wen we try to 
tell our computer to close a window, it is very likely that the computer refuses and treats you as a fool.
</p>

<p>
In order to retake the control, after some googling you will eventually find out that some operator systems have something called <b>the terminal</b>, the interpreter you are looking for to 
<i>tell the computer what to do!</i>. 
</p>

<p>
We will go into the history of computers another time. Here we will only mention that regardless of the operator system you are using, you should find your way to your terminal. Here we are using
the Unix-like system Linux and our terminal is Bash. 
</p>

<p>
At the end of the journey, you will have recovered enough freedom that you will be able to exploit your computer's operating system power in a higher level.
</p>
</div>
</div>
<div id="outline-container-orge615565" class="outline-2">
<h2 id="orge615565">The VERY Basics</h2>
<div class="outline-text-2" id="text-orge615565">
<p>
This is a quick list of the commands you should be 100% comfortable with. We summarised them in a table with a small description. Once
you are able to understand where is your working directory, how to create files and folders, what are the permissions and once you have used the magical grep 
to find a needle in a haystack then you will be ready for the next section.
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Command</th>
<th scope="col" class="org-left">Description</th>
<th scope="col" class="org-left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">ls</td>
<td class="org-left">list of Files/Folders in current directory</td>
<td class="org-left">ls -hal</td>
</tr>

<tr>
<td class="org-left">pwd</td>
<td class="org-left">print the working directory</td>
<td class="org-left">pwd</td>
</tr>

<tr>
<td class="org-left">cd</td>
<td class="org-left">change of (current) directory</td>
<td class="org-left">cd ../</td>
</tr>

<tr>
<td class="org-left">cp</td>
<td class="org-left">copy</td>
<td class="org-left">cp file /path_to_directory</td>
</tr>

<tr>
<td class="org-left">mv</td>
<td class="org-left">move</td>
<td class="org-left">mv /old_file_path /new_file_path</td>
</tr>

<tr>
<td class="org-left">rm</td>
<td class="org-left">remove (files and with option -r directories)</td>
<td class="org-left">rm -rf</td>
</tr>

<tr>
<td class="org-left">mkdir</td>
<td class="org-left">create a folder/directory</td>
<td class="org-left">mkdir new_dir</td>
</tr>

<tr>
<td class="org-left">touch</td>
<td class="org-left">change file timestamps</td>
<td class="org-left">touch *</td>
</tr>

<tr>
<td class="org-left">echo</td>
<td class="org-left">display a line of text</td>
<td class="org-left">echo $HOME</td>
</tr>

<tr>
<td class="org-left">&vert;</td>
<td class="org-left">pipeline</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">less</td>
<td class="org-left">less is not more (text viewer)</td>
<td class="org-left">ls -l &vert; less</td>
</tr>

<tr>
<td class="org-left">more</td>
<td class="org-left">more is less (text viewer)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">cat</td>
<td class="org-left">concatenate</td>
<td class="org-left">cat file.txt</td>
</tr>

<tr>
<td class="org-left">C-e</td>
<td class="org-left">Ctrl + e    like in emacs go to the end of the line</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-a</td>
<td class="org-left">Ctrl + a    like in emacs go to the begining of the line</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">wc</td>
<td class="org-left">a word counter (or lines or characters&#x2026;)</td>
<td class="org-left">wc -lwc file</td>
</tr>

<tr>
<td class="org-left">\</td>
<td class="org-left">escape for a reserved character</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&gt;</td>
<td class="org-left">apend in the last line</td>
<td class="org-left">"new text" &gt; file.txt</td>
</tr>

<tr>
<td class="org-left">&gt;&gt;</td>
<td class="org-left">apend in the a new line</td>
<td class="org-left">"new line text" &gt;&gt; file.txt</td>
</tr>

<tr>
<td class="org-left">sed</td>
<td class="org-left">powerful search and change</td>
<td class="org-left">sed 's/old/new/g' file.txt</td>
</tr>

<tr>
<td class="org-left">tail</td>
<td class="org-left">output the last part of the file</td>
<td class="org-left">tail file.txt</td>
</tr>

<tr>
<td class="org-left">head</td>
<td class="org-left">output the first part of the file</td>
<td class="org-left">head file.txt</td>
</tr>

<tr>
<td class="org-left">tee</td>
<td class="org-left">read form standard input and write to standard output</td>
<td class="org-left">wc -l file1.txt &vert; tee file2.txt</td>
</tr>

<tr>
<td class="org-left">find</td>
<td class="org-left">search for files in a directory</td>
<td class="org-left">find file<sub>name</sub>*.html</td>
</tr>

<tr>
<td class="org-left">tr</td>
<td class="org-left">a translator (see example)</td>
<td class="org-left">echo sometext &vert;   tr [:lower:] [:upper:]</td>
</tr>

<tr>
<td class="org-left">cut</td>
<td class="org-left">remove sections from each line of files</td>
<td class="org-left">echo abcdefgh &vert; cut -c1-2,6-8</td>
</tr>

<tr>
<td class="org-left">paste</td>
<td class="org-left">merge lines of files</td>
<td class="org-left">paste -d "&vert;" file1.txt file2.txt file3.txt</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org1cbb1c3" class="outline-2">
<h2 id="org1cbb1c3">TAR: Compress and eXtract and view List tarball.</h2>
<div class="outline-text-2" id="text-org1cbb1c3">
<p>
  The <b>tar</b> command is according to the manual <i>an archiving</i> utility. It is used to store several files in a single file and to manipulate
them. 
</p>

<ul class="org-ul">
<li><code>tar -cvf archive.tar file1 file2</code>. Creates an archive tar file containing file1 and file2 (non compressed).</li>
<li><code>tar -xvf archive.tar</code>. It extracts files from archive.tar.</li>
<li><code>tar -cvzf arvhive.tar.gz file1 file2</code>. Creates a compressed archive tar.gz file containing file1 and file2.</li>
<li><code>tar -xvzf arvhive.tar.gz</code>. It extracts files from archive.tar.gz.</li>
<li><code>tar -cvfj arvhive.tar.tbz file1 file2</code>. Creates a compressed archive tar.tbz file using tbzip containing file1 and file2.</li>
<li><code>tar -xvfj arvhive.tar.tbz</code>. It extracts files from archive.tar.tbz.</li>
<li><code>tar -tvf archive.tar.[gz][tbz]</code>. List all the files in archive.tar.</li>
</ul>
</div>
</div>


<div id="outline-container-orgbc96428" class="outline-2">
<h2 id="orgbc96428">grep</h2>
<div class="outline-text-2" id="text-orgbc96428">
<p>
This is where the fun begins. Its name stands from Globally search for a Regular Expression and Print matching lines, and it is one
of the oldest command-line utilities.
</p>

<p>
Let's start by creating a text file directly from the command line. If there is a command it is not in the list that we are using here, please
recall you can always use your friend <i>man</i> or <i>apropos</i> in order to find out more details.
</p>

<p>
Let's create a small text file using cat. Provide the following lines and when you are done
type <code>ctrl-d</code>, which is the signal for <b>End of File</b> (EOF):
</p>

<div class="org-src-container">
<pre class="src src-bash">cat &gt; grep_file.txt
one
two
huehueocelotl
123user
user_one
user_one_two
user_ONE_three
</pre>
</div>


<p>
Now you can use <i>grep</i> to see if the word <i>one</i> occurs in your file grep_file.txt
</p>

<div class="org-src-container">
<pre class="src src-bash">grep one grep_file.txt
</pre>
</div>

<pre class="example">
one
user_one
user_one_two
</pre>


<p>
You can use <i>grep -n</i> to additionally show the line where the word appears
</p>

<div class="org-src-container">
<pre class="src src-bash">grep -n one grep_file.txt
</pre>
</div>

<pre class="example">
1:one
5:user_one
6:user_one_two
</pre>


<p>
You can use <i>grep -c</i> you get the number of lines the word occurs
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -c one grep_file.txt
</pre>
</div>

<pre class="example">
3
</pre>


<p>
You can use <i>grep -v</i> you get the lines where the word does not occurs
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -v one grep_file.txt
</pre>
</div>

<pre class="example">
two
huehueocelotl
123user
user_ONE_three
</pre>


<p>
You can use <i>grep -i</i> to ignore case 
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -i oNe grep_file.txt
</pre>
</div>

<pre class="example">
one
user_one
user_one_two
user_ONE_three
</pre>


<p>
You can use <i>grep -x</i> to look for an exact match
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -x one grep_file.txt
</pre>
</div>

<pre class="example">
one
</pre>


<p>
You can use <i>grep -o</i> to look only the matched parts of the matching line. This is specially useful when looking for more complex regular expressions
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -o one grep_file.txt
</pre>
</div>

<pre class="example">
one
one
one
</pre>


<p>
You can use <i>grep -A 3</i> to look for a word plus additional number of lines
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -A 3 huehueocelotl grep_file.txt
</pre>
</div>

<pre class="example">
huehueocelotl
123user
user_one
user_one_two
</pre>


<p>
You can use <i>grep -lr</i> to print the file names of files containing a word including directories
</p>
<div class="org-src-container">
<pre class="src src-bash">grep -lr user_one *
</pre>
</div>
</div>
</div>




<div id="outline-container-org1a30c8d" class="outline-2">
<h2 id="org1a30c8d">Sed</h2>
<div class="outline-text-2" id="text-org1a30c8d">
<p>
This is a Stream Editor. What? Yes, you can modify a text file on the fly! No need to waste you time
by opening a text editor to  click search and replace or things like that anymore.
</p>

<p>
Let's work with the following sample text file. Again recall that at the end you have to give
the EOF signal by typing ctl-d.
</p>

<div class="org-src-container">
<pre class="src src-bash">cat &gt; sed_file.txt
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.
Huehueocelotl has Mexican roots and its name means the <span style="color: #e67128;">"Wise Old Jaguar"</span>.

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn linux and the linux terminal<span style="color: #ffad29; font-weight: bold;"> in</span> any linux distribution.
</pre>
</div>
</div>

<div id="outline-container-orgf633041" class="outline-3">
<h3 id="orgf633041">Search and replace</h3>
<div class="outline-text-3" id="text-orgf633041">
<p>
This examples illustrates the basic usage of the sed command.  
It will search for a text pattern  in  the file and replace it with another:
</p>


<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/linux/Huehueocelotl/'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use Huehueocelotl.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn Huehueocelotl and the linux terminal in any linux distribution.
</pre>



<p>
Two things to notice quickly: 
</p>
<ul class="org-ul">
<li>By default sed replaces the first occurrence of the given pattern in every line.</li>
<li>sed is case-sensitive</li>
</ul>


<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/Linux/Huehueocelotl/'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because Huehueocelotl is not Unix we use Linux.
Please learn linux and the linux terminal in any linux distribution.
</pre>


<p>
The option <i>I</i> at the very end makes sed to ignore cases. This trick seems to work in GNU sed but not in BDS.
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/linux/huehueocelotl/I'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use huehueocelotl.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because huehueocelotl is not Unix we use Linux.
Please learn huehueocelotl and the linux terminal in any linux distribution.
</pre>


<p>
If we want the change to be done in all occurrences in the file we use the option <i>global</i>.
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/linux/huehueocelotl/g'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use huehueocelotl.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn huehueocelotl and the huehueocelotl terminal in any huehueocelotl distribution.
</pre>




<p>
We can also specify to perform the changes only on the second occurrence of the pattern in each line:
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/linux/Huehueocelotl/2'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn linux and the Huehueocelotl terminal in any linux distribution.
</pre>



<p>
Sed can also change all occurrences of a patter from the n-th occurrence in each line. In the following example we also ignore case:
</p>

<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'s/linux/Huehueocelotl/2gI'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.
Huehueocelotl has Mexican roots and its name means the "Wise Old Jaguar".

We use UNIX-like operators systems and because Linux is not Unix we use Huehueocelotl.
Please learn linux and the Huehueocelotl terminal in any Huehueocelotl distribution.
</pre>



<p>
You can also be very specific and change a string in just one line
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'2 s/e/E/g'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.
HuEhuEocElotl has MExican roots and its namE mEans thE "WisE Old Jaguar".

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn linux and the linux terminal in any linux distribution.
</pre>



<p>
With sed you can also delete specific lines, 
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'2d'</span> sed_file.txt
</pre>
</div>

<pre class="example">
Huehueocelotl is a fantastic website. In huehueocelotl we use linux.

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn linux and the linux terminal in any linux distribution.
</pre>


<p>
and lines mathcing specific patterns too
</p>
<div class="org-src-container">
<pre class="src src-bash">sed <span style="color: #e67128;">'/Huehueocelotl/d'</span> sed_file.txt
</pre>
</div>

<pre class="example">

We use UNIX-like operators systems and because Linux is not Unix we use Linux.
Please learn linux and the linux terminal in any linux distribution.
</pre>
</div>
</div>
</div>


<div id="outline-container-orgc4a93f8" class="outline-2">
<h2 id="orgc4a93f8">awk</h2>
<div class="outline-text-2" id="text-orgc4a93f8">
<p>
Awk is a whole program language for data extraction and reporting. The triplet grep, sed and awk is 
a classic one in UNIX-like operator systems.
</p>

<p>
We will be using the following text file with values separated by a comma:
</p>


<div class="org-src-container">
<pre class="src src-bash">cat  &gt; awk_file.txt 
One,2,3,4
Two,3,4,5
Three,5,6,7
</pre>
</div>

<p>
We can print the first column (field) specifying the field separator -F
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span>  <span style="color: #e67128;">'{print $1,$3}'</span> awk_file.txt
</pre>
</div>

<pre class="example">
One 3
Two 4
Three 6
</pre>


<p>
The options NR keeps a count on the number of lines or rows and NF of the number of fields or 
columns.. In this example we
use NR to create a field with the row number, the first and last columns
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span>  <span style="color: #e67128;">'{print NR,$1,$NF}'</span> awk_file.txt
</pre>
</div>

<pre class="example">
1 One 4
2 Two 5
3 Three 7
</pre>


<p>
Print the second row of last result
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span>  <span style="color: #e67128;">'FNR==2 {print  NR,$1,$NF}'</span> awk_file.txt
</pre>
</div>

<pre class="example">
2 Two 5
</pre>


<p>
To change separator or delimiter from "," to ":". Note the use of dummy assignment <code>$1=$1</code>:
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span>  <span style="color: #e67128;">'$1=$1'</span> <span style="color: #dbdb95;">OFS</span>=<span style="color: #e67128;">":"</span> awk_file.txt
</pre>
</div>

<pre class="example">
One:2:3:4
Two:3:4:5
Three:5:6:7
</pre>




<p>
Print an extra column with the result of a logical statement
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span> <span style="color: #e67128;">'{print $0,$2==5}'</span> <span style="color: #dbdb95;">OFS</span>=<span style="color: #e67128;">","</span> awk_file.txt
</pre>
</div>

<pre class="example">
One,2,3,4,0
Two,3,4,5,0
Three,5,6,7,1
</pre>



<p>
Row filters
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span> <span style="color: #e67128;">'$2==5 || $4==4'</span> <span style="color: #dbdb95;">OFS</span>=<span style="color: #e67128;">","</span> awk_file.txt
</pre>
</div>

<pre class="example">
One,2,3,4
Three,5,6,7
</pre>


<p>
Row filter with patterns
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span> <span style="color: #e67128;">'$1 ~ /[oO]/'</span> <span style="color: #dbdb95;">OFS</span>=<span style="color: #e67128;">","</span> awk_file.txt
</pre>
</div>

<pre class="example">
One,2,3,4
Two,3,4,5
</pre>


<p>
Frequency table using unique function
</p>
<div class="org-src-container">
<pre class="src src-bash">awk -F<span style="color: #e67128;">","</span> <span style="color: #e67128;">'{print $0,$2==5}'</span> <span style="color: #dbdb95;">OFS</span>=<span style="color: #e67128;">","</span> awk_file.txt | awk -F<span style="color: #e67128;">","</span> <span style="color: #e67128;">'{print $NF}'</span> | uniq -c
</pre>
</div>

<pre class="example">
2 0
1 1
</pre>


<p>
Sum the values of a column with a row filter
</p>
<div class="org-src-container">
<pre class="src src-bash">awk  <span style="color: #e67128;">'BEGIN {FS = ","} ; $1 ~ /[oO]/ {sum+=$3} END {print sum}'</span> awk_file.txt
</pre>
</div>

<pre class="example">
7
</pre>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author"> © Huehueocelotl </p>

 <p class="email"><a href="mailto:Huehueocelotl@gmail.com">Huehueocelotl@gmail.com</a></p>

<p class="validation"><a href="https://www.gnu.org/licenses/gpl-3.0.en.html">Licence</a></p>
<p class="creator"><small>Generated by <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.3.6)</small></p>
</div>
</body>
</html>
